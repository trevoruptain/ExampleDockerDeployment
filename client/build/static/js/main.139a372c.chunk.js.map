{"version":3,"sources":["graphql/queries.js","util/route_util.js","components/Nav.js","graphql/mutations.js","components/Login.js","components/Register.js","components/products/ProductIndex.js","components/cart/AddToCart.js","components/products/ProductDetail.js","components/products/CreateProduct.js","components/cart/CartItem.js","components/cart/Cart.js","components/App.js","index.js"],"names":["IS_LOGGED_IN","gql","FETCH_PRODUCTS","FETCH_PRODUCT","FETCH_CART_ITEMS","Queries","AuthRoute","Component","component","path","exact","routeType","rest","query","data","render","props","isLoggedIn","to","Nav","client","className","onClick","e","preventDefault","localStorage","removeItem","writeData","cart","history","push","LOGIN_USER","REGISTER_USER","CREATE_PRODUCT","VERIFY_USER","Mutations","Login","state","email","password","field","setState","target","value","login","loggedIn","mutation","onCompleted","token","setItem","update","updateCache","loginUser","onSubmit","variables","onChange","placeholder","type","Register","name","register","registerUser","ProductIndex","loading","error","products","map","_id","cost","description","key","AddToCart","cache","productId","id","some","item","readQuery","filter","writeQuery","ProductDetail","match","params","category","product","weight","CreateProduct","message","this","console","log","err","productArray","newProduct","concat","parseInt","onError","handleSubmit","CartItem","Cart","length","uri","App","InMemoryCache","dataIdFromObject","object","errorLink","graphQLErrors","httpLink","createHttpLink","headers","authorization","getItem","ApolloClient","link","ApolloLink","from","networkError","mutate","then","verifyUser","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.139a372c.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport default {\n  IS_LOGGED_IN: gql`\n    query IsUserLoggedIn {\n      isLoggedIn @client\n    }\n  `,\n  FETCH_PRODUCTS: gql`\n    query fetchProducts {\n      products {\n        _id\n        name\n        description\n        cost\n      }\n    }\n  `,\n  FETCH_PRODUCT: gql`\n    query fetchProduct($productId: ID!) {\n      product(_id: $productId) {\n        _id\n        name\n        cost\n        description\n        weight\n        category {\n          name\n        }\n      }\n    }\n  `,\n  FETCH_CART_ITEMS: gql`\n    query FetchCartItems {\n      cart @client\n    }\n  `\n};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Query } from 'react-apollo';\nimport Queries from '../graphql/queries';\nconst { IS_LOGGED_IN } = Queries;\n\nconst AuthRoute = ({ component: Component, path, exact, routeType, ...rest }) => (\n    <Query query={IS_LOGGED_IN}>\n        {({ data }) => {\n            if (routeType === 'auth') {\n                return <Route path={path} exact={exact} render={(props) => (\n                    !data.isLoggedIn ? (\n                        <Component {...props} />\n                    ) : (\n                        <Redirect to=\"/\" />\n                        )\n                )} />;\n            } else {\n                return <Route\n                    {...rest}\n                    render={props =>\n                        data.isLoggedIn ? (\n                            <Component {...props} />\n                        ) : (\n                                <Redirect to=\"/login\" />\n                            )\n                    }\n                />\n            }\n        }}\n    </Query>\n)\n\nexport default AuthRoute;","import React from \"react\";\nimport { ApolloConsumer, Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\n\nimport Queries from \"../graphql/queries\";\nconst { IS_LOGGED_IN } = Queries;\n\nconst Nav = props => {\n  return (\n    <ApolloConsumer>\n      {client => (\n        <Query query={IS_LOGGED_IN}>\n          {({ data }) => {\n            if (data.isLoggedIn) {\n              return (\n                <div className=\"nav\">\n                  <button\n                    onClick={e => {\n                      e.preventDefault();\n                      localStorage.removeItem(\"auth-token\");\n                      client.writeData({\n                        data: {\n                          isLoggedIn: false,\n                          cart: []\n                        }\n                      });\n                      props.history.push(\"/\");\n                    }}\n                  >\n                    Logout\n                  </button>\n                  <Link to=\"/cart\">Cart</Link>\n                  <Link to=\"/create\">Create A New Product</Link>\n                </div>\n              );\n            } else {\n              return (\n                <div className=\"nav\">\n                  <Link to=\"/login\">Login</Link>\n                  <Link to=\"/register\">Register</Link>\n                </div>\n              );\n            }\n          }}\n        </Query>\n      )}\n    </ApolloConsumer>\n  );\n};\n\nexport default Nav;\n","import gql from \"graphql-tag\";\n\nexport default {\n  LOGIN_USER: gql`\n    mutation LoginUser($email: String!, $password: String!) {\n      login(email: $email, password: $password) {\n        token\n        loggedIn\n      }\n    }\n  `,\n  REGISTER_USER: gql`\n    mutation RegisterUser($email: String!, $name: String!, $password: String!) {\n      register(email: $email, name: $name, password: $password) {\n        token\n        loggedIn\n      }\n    }\n  `,\n  CREATE_PRODUCT: gql`\n    mutation CreateProduct(\n      $name: String!\n      $description: String!\n      $weight: Int!\n    ) {\n      newProduct(name: $name, description: $description, weight: $weight) {\n        _id\n        name\n        description\n        weight\n      }\n    }\n  `,\n  VERIFY_USER: gql`\n    mutation VerifyUser($token: String!) {\n      verifyUser(token: $token) {\n        loggedIn\n      }\n    }\n  `\n};\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../graphql/mutations\";\n\nconst { LOGIN_USER } = Mutations;\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(client, { data }) {\n    client.writeData({\n      data: { isLoggedIn: data.login.loggedIn }\n    });\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={LOGIN_USER}\n        onCompleted={data => {\n          const { token } = data.login;\n          localStorage.setItem(\"auth-token\", token);\n          this.props.history.push(\"/\");\n        }}\n        update={(client, data) => this.updateCache(client, data)}\n      >\n        {loginUser => (\n          <div>\n            <form\n              onSubmit={e => {\n                e.preventDefault();\n                loginUser({\n                  variables: {\n                    email: this.state.email,\n                    password: this.state.password\n                  }\n                });\n              }}\n            >\n              <input\n                value={this.state.email}\n                onChange={this.update(\"email\")}\n                placeholder=\"Email\"\n              />\n              <input\n                value={this.state.password}\n                onChange={this.update(\"password\")}\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n              <button type=\"submit\">Log In</button>\n            </form>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../graphql/mutations\";\n\nconst { REGISTER_USER } = Mutations;\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(client, { data }) {\n    client.writeData({\n      data: { isLoggedIn: data.register.loggedIn }\n    });\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={REGISTER_USER}\n        onCompleted={data => {\n          const { token } = data.register;\n          localStorage.setItem(\"auth-token\", token);\n          this.props.history.push(\"/\");\n        }}\n        update={(client, data) => this.updateCache(client, data)}\n      >\n        {registerUser => (\n          <div>\n            <form\n              onSubmit={e => {\n                e.preventDefault();\n                registerUser({\n                  variables: {\n                    name: this.state.name,\n                    email: this.state.email,\n                    password: this.state.password\n                  }\n                });\n              }}\n            >\n              <input\n                value={this.state.name}\n                onChange={this.update(\"name\")}\n                placeholder=\"Name\"\n              />\n              <input\n                value={this.state.email}\n                onChange={this.update(\"email\")}\n                placeholder=\"Email\"\n              />\n              <input\n                value={this.state.password}\n                onChange={this.update(\"password\")}\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n              <button type=\"submit\">Register</button>\n            </form>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default Register;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_PRODUCTS } = Queries;\n\nconst ProductIndex = () => {\n  return (\n    <div>\n      <ul>\n        <Query query={FETCH_PRODUCTS}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error</p>;\n            return data.products.map(({ _id, name, cost, description }) => (\n              <li key={_id}>\n                <Link to={`/products/${_id}`}>\n                  <h4>{name}</h4>\n                </Link>\n                <p className=\"cost\">Cost: {cost}</p>\n                <p className=\"cost\">Description: {description}</p>\n              </li>\n            ));\n          }}\n        </Query>\n      </ul>\n    </div>\n  );\n};\n\nexport default ProductIndex;\n","import React from \"react\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_CART_ITEMS } = Queries;\n\nconst AddToCart = props => {\n  return (\n    <ApolloConsumer>\n      {cache => (\n        <Query query={FETCH_CART_ITEMS} variables={{ productId: props.id }}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error</p>;\n\n            if (data.cart.some(item => item.id === props.id)) {\n              return (\n                <button\n                  onClick={e => {\n                    e.preventDefault();\n                    // first we read the query from the cache\n                    const { cart } = cache.readQuery({\n                      query: FETCH_CART_ITEMS\n                    });\n                    // filter out the item we want to remove\n                    const data = {\n                      cart: cart.filter(item => {\n                        return item.id !== props.id;\n                      })\n                    };\n                    // re-add to our cache with that removed item\n                    cache.writeQuery({ query: FETCH_CART_ITEMS, data });\n                  }}\n                >\n                  Remove from cart\n                </button>\n              );\n            } else {\n              return (\n                <button\n                  onClick={e => {\n                    e.preventDefault();\n                    // read from the cache\n                    const { cart } = cache.readQuery({\n                      query: FETCH_CART_ITEMS\n                    });\n                    // create our object with the id and cost from our props and add it to\n                    // the array of cart items\n                    const data = {\n                      cart: [...cart, { id: props.id, cost: props.cost }]\n                    };\n                    // write to our cache with our new array of cart items!\n                    cache.writeQuery({ query: FETCH_CART_ITEMS, data });\n                  }}\n                >\n                  Add to cart\n                </button>\n              );\n            }\n          }}\n        </Query>\n      )}\n    </ApolloConsumer>\n  );\n};\n\nexport default AddToCart;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport AddToCart from \"../cart/AddToCart\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_PRODUCT } = Queries;\n\nconst ProductDetail = props => {\n  return (\n    <div>\n      <Query\n        query={FETCH_PRODUCT}\n        variables={{ productId: props.match.params.productId }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return <p>Loading...</p>;\n          if (error) return <p>Error</p>;\n          // set up our category in case we don't have one\n          let category = \"None\";\n          if (data.product.category) {\n            category = data.product.category.name;\n          }\n          return (\n            <div>\n              <p>Name: {data.product.name}</p>\n              <p>Weight: {data.product.weight} lbs.</p>\n              <p>Description: {data.product.description}</p>\n              <p>Price: ${data.product.cost}</p>\n              <p>Category: {category}</p>\n              <AddToCart id={data.product._id} cost={data.product.cost} />\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default ProductDetail;\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\n\nimport Mutations from \"../../graphql/mutations\";\nimport Queries from \"../../graphql/queries\";\nconst { CREATE_PRODUCT } = Mutations;\nconst { FETCH_PRODUCTS } = Queries;\n\nclass CreateProduct extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\",\n      name: \"\",\n      weight: \"\",\n      description: \"\"\n    };\n  }\n\n  handleUpdate(e) {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(cache, { data }) {\n    console.log(\"here\");\n    let products;\n    try {\n      products = cache.readQuery({ query: FETCH_PRODUCTS });\n    } catch (err) {\n      return;\n    }\n\n    if (products) {\n      let productArray = products.products;\n      let newProduct = data.newProduct;\n      cache.writeQuery({\n        query: FETCH_PRODUCTS,\n        data: { products: productArray.concat(newProduct) }\n      });\n    }\n  }\n\n  handleSubmit(e, newProduct) {\n    e.preventDefault();\n    let name = this.state.name;\n    newProduct({\n      variables: {\n        name: name,\n        description: this.state.description,\n        weight: parseInt(this.state.weight)\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={CREATE_PRODUCT}\n        onError={err => this.setState({ message: err.message })}\n        update={(cache, data) => this.updateCache(cache, data)}\n        onCompleted={data => {\n          const { name } = data.newProduct;\n          this.setState({\n            message: `New product ${name} created successfully`\n          });\n        }}\n      >\n        {(newProduct, { data }) => (\n          <div>\n            <form onSubmit={e => this.handleSubmit(e, newProduct)}>\n              <input\n                onChange={this.update(\"name\")}\n                value={this.state.name}\n                placeholder=\"Name\"\n              />\n              <textarea\n                onChange={this.update(\"description\")}\n                value={this.state.description}\n                placeholder=\"description\"\n              />\n              <input\n                onChange={this.update(\"weight\")}\n                value={this.state.weight}\n                placeholder=\"Weight\"\n                type=\"number\"\n              />\n              <button type=\"submit\">Create Product</button>\n            </form>\n            <p>{this.state.message}</p>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default CreateProduct;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_PRODUCT } = Queries;\n\nconst CartItem = props => {\n  return (\n    <Query query={FETCH_PRODUCT} variables={{ productId: props.id }}>\n      {({ loading, error, data }) => {\n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error</p>;\n        return (\n          <div>\n            <p>Name: {data.product.name}</p>\n            <p>Weight: {data.product.weight} lbs.</p>\n            <p>Description: {data.product.description}</p>\n            <p>Price: ${data.product.cost}</p>\n            <hr />\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default CartItem;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport CartItem from \"./CartItem\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_CART_ITEMS } = Queries;\n\nexport default function Cart() {\n  return (\n    <Query query={FETCH_CART_ITEMS}>\n      {({ data, loading, error }) => {\n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error: {error.message}</p>;\n\n        let cost = 0;\n\n        return (\n          <div>\n            <h3>Shopping Cart</h3>\n            {!data.cart || !data.cart.length ? (\n              <p>The cart is empty</p>\n            ) : (\n              <div>\n                {data.cart.map(product => {\n                  cost += product.cost;\n                  return <CartItem key={product.id} id={product.id} />;\n                })}\n                <b>Total: ${cost}</b>\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </Query>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport AuthRoute from \"../util/route_util\";\n\nimport Nav from \"./Nav\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport ProductIndex from \"./products/ProductIndex\";\nimport ProductDetail from \"./products/ProductDetail\";\nimport CreateProduct from \"./products/CreateProduct\";\nimport Cart from \"./cart/Cart\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>\n        <Link to=\"/\">Online Store</Link>\n      </h1>\n      <Route path=\"/\" component={Nav} />\n      <Switch>\n        <Route exact path=\"/\" component={ProductIndex} />\n        <AuthRoute\n          exact\n          path=\"/products/:productId\"\n          component={ProductDetail}\n          routeType=\"protected\"\n        />\n        <AuthRoute\n          exact\n          path=\"/create\"\n          component={CreateProduct}\n          routeType=\"protected\"\n        />\n        <AuthRoute exact path=\"/cart\" component={Cart} routeType=\"protected\" />\n        <AuthRoute exact path=\"/login\" component={Login} routeType=\"auth\" />\n        <AuthRoute\n          exact\n          path=\"/register\"\n          component={Register}\n          routeType=\"auth\"\n        />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./public/index.css\";\nimport App from \"./components/App\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloLink } from \"apollo-link\";\nimport { onError } from \"apollo-link-error\";\n\nimport Mutations from \"./graphql/mutations\";\nconst { VERIFY_USER } = Mutations;\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n});\n\nlet uri;\n\nif (process.env.NODE_ENV === \"production\") {\n  uri = `/graphql`;\n} else {\n  uri = \"http://localhost:5000/graphql\";\n}\n\nconst httpLink = createHttpLink({\n  uri,\n  headers: {\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n});\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([errorLink, httpLink]),\n  cache,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\ncache.writeData({\n  data: {\n    isLoggedIn: false,\n    cart: []\n  }\n});\n\nconst token = localStorage.getItem(\"auth-token\");\nif (token) {\n  client\n    .mutate({ mutation: VERIFY_USER, variables: { token } })\n    .then(({ data }) => {\n      cache.writeData({\n        data: {\n          isLoggedIn: data.verifyUser.loggedIn,\n          cart: []\n        }\n      });\n    });\n}\n\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}