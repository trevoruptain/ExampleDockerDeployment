{"version":3,"sources":["graphql/queries.js","util/route_util.js","components/Nav.js","graphql/mutations.js","components/Login.js","components/Register.js","components/products/ProductIndex.js","components/cart/AddToCart.js","components/products/ProductDetail.js","components/products/CreateProduct.js","components/cart/CartItem.js","components/cart/Cart.js","components/App.js","index.js"],"names":["queries","IS_LOGGED_IN","gql","_templateObject","FETCH_PRODUCTS","_templateObject2","FETCH_PRODUCT","_templateObject3","FETCH_CART_ITEMS","_templateObject4","Queries","AuthRoute","_ref","Component","component","path","exact","routeType","rest","Object","objectWithoutProperties","react_default","a","createElement","react_apollo_esm","query","_ref2","data","react_router","render","props","isLoggedIn","to","assign","Nav","client","className","onClick","e","preventDefault","localStorage","removeItem","writeData","cart","history","push","react_router_dom","mutations","LOGIN_USER","mutations_templateObject","REGISTER_USER","mutations_templateObject2","CREATE_PRODUCT","mutations_templateObject3","VERIFY_USER","mutations_templateObject4","Mutations","Login","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","password","field","_this2","setState","defineProperty","target","value","login","loggedIn","_this3","mutation","onCompleted","token","setItem","update","updateCache","loginUser","onSubmit","variables","onChange","placeholder","type","Register","name","register","registerUser","ProductIndex","loading","error","products","map","_id","cost","description","key","concat","AddToCart","cache","productId","id","some","item","readQuery","filter","writeQuery","toConsumableArray","ProductDetail","match","params","category","product","weight","cart_AddToCart","CreateProduct","message","console","log","err","productArray","newProduct","parseInt","onError","handleSubmit","CartItem","Cart","length","cart_CartItem","uri","App","route_util","InMemoryCache","dataIdFromObject","object","errorLink","graphQLErrors","httpLink","createHttpLink","headers","authorization","getItem","ApolloClient","link","ApolloLink","from","_ref3","networkError","mutate","then","_ref4","verifyUser","ReactDOM","components_App","document","getElementById"],"mappings":"88BAEe,IAAAA,EAAA,CACbC,aAAcC,IAAFC,KAKZC,eAAgBF,IAAFG,KAUdC,cAAeJ,IAAFK,KAcbC,iBAAkBN,IAAFO,MC5BVR,EAAiBS,EAAjBT,aA6BOU,EA3BG,SAAAC,GAAA,IAAcC,EAAdD,EAAGE,UAAsBC,EAAzBH,EAAyBG,KAAMC,EAA/BJ,EAA+BI,MAAOC,EAAtCL,EAAsCK,UAAcC,EAApDC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,iDACdS,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOxB,GACT,SAAAyB,GAAc,IAAXC,EAAWD,EAAXC,KACA,MAAkB,SAAdV,EACOI,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOb,KAAMA,EAAMC,MAAOA,EAAOa,OAAQ,SAACC,GAAD,OAC3CH,EAAKI,WAGFV,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUI,GAAG,MAFbX,EAAAC,EAAAC,cAACV,EAAciB,MAMhBT,EAAAC,EAAAC,cAACK,EAAA,EAADT,OAAAc,OAAA,GACCf,EADD,CAEHW,OAAQ,SAAAC,GAAK,OACTH,EAAKI,WACDV,EAAAC,EAAAC,cAACV,EAAciB,GAEXT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUI,GAAG,kBCnBrC/B,EAAiBS,EAAjBT,aA6COiC,EA3CH,SAAAJ,GACV,OACET,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACG,SAAAW,GAAM,OACLd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOxB,GACX,SAAAW,GACC,OADaA,EAAXe,KACOI,WAELV,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,UACEc,QAAS,SAAAC,GACPA,EAAEC,iBACFC,aAAaC,WAAW,cACxBN,EAAOO,UAAU,CACff,KAAM,CACJI,YAAY,EACZY,KAAM,MAGVb,EAAMc,QAAQC,KAAK,OAVvB,UAeAxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMd,GAAG,SAAT,QACAX,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMd,GAAG,WAAT,yBAKFX,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMd,GAAG,UAAT,SACAX,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMd,GAAG,aAAT,2kCCrCH,IAAAe,EAAA,CACbC,WAAY9C,IAAF+C,KAQVC,cAAehD,IAAFiD,KAQbC,eAAgBlD,IAAFmD,KAcdC,YAAapD,IAAFqD,MC7BLP,EAAeQ,EAAfR,WAkEOS,cA/Db,SAAAA,EAAY3B,GAAO,IAAA4B,EAAA,OAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,KAAAH,IACjBC,EAAAvC,OAAA0C,EAAA,EAAA1C,CAAAyC,KAAAzC,OAAA2C,EAAA,EAAA3C,CAAAsC,GAAAM,KAAAH,KAAM9B,KAEDkC,MAAQ,CACXC,MAAO,GACPC,SAAU,IALKR,sEASZS,GAAO,IAAAC,EAAAR,KACZ,OAAO,SAAAtB,GAAC,OAAI8B,EAAKC,SAALlD,OAAAmD,EAAA,EAAAnD,CAAA,GAAiBgD,EAAQ7B,EAAEiC,OAAOC,6CAGpCrC,KAAkB,IAARR,EAAQf,EAARe,KACpBQ,EAAOO,UAAU,CACff,KAAM,CAAEI,WAAYJ,EAAK8C,MAAMC,6CAI1B,IAAAC,EAAAf,KACP,OACEvC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoD,SAAU5B,EACV6B,YAAa,SAAAlD,GAAQ,IACXmD,EAAUnD,EAAK8C,MAAfK,MACRtC,aAAauC,QAAQ,aAAcD,GACnCH,EAAK7C,MAAMc,QAAQC,KAAK,MAE1BmC,OAAQ,SAAC7C,EAAQR,GAAT,OAAkBgD,EAAKM,YAAY9C,EAAQR,KAElD,SAAAuD,GAAS,OACR7D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QACE4D,SAAU,SAAA7C,GACRA,EAAEC,iBACF2C,EAAU,CACRE,UAAW,CACTnB,MAAOU,EAAKX,MAAMC,MAClBC,SAAUS,EAAKX,MAAME,cAK3B7C,EAAAC,EAAAC,cAAA,SACEiD,MAAOG,EAAKX,MAAMC,MAClBoB,SAAUV,EAAKK,OAAO,SACtBM,YAAY,UAEdjE,EAAAC,EAAAC,cAAA,SACEiD,MAAOG,EAAKX,MAAME,SAClBmB,SAAUV,EAAKK,OAAO,YACtBO,KAAK,WACLD,YAAY,aAEdjE,EAAAC,EAAAC,cAAA,UAAQgE,KAAK,UAAb,qBAvDM1E,aCFZqC,EAAkBM,EAAlBN,cAyEOsC,cAtEb,SAAAA,EAAY1D,GAAO,IAAA4B,EAAA,OAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,KAAA4B,IACjB9B,EAAAvC,OAAA0C,EAAA,EAAA1C,CAAAyC,KAAAzC,OAAA2C,EAAA,EAAA3C,CAAAqE,GAAAzB,KAAAH,KAAM9B,KAEDkC,MAAQ,CACXyB,KAAM,GACNxB,MAAO,GACPC,SAAU,IANKR,sEAUZS,GAAO,IAAAC,EAAAR,KACZ,OAAO,SAAAtB,GAAC,OAAI8B,EAAKC,SAALlD,OAAAmD,EAAA,EAAAnD,CAAA,GAAiBgD,EAAQ7B,EAAEiC,OAAOC,6CAGpCrC,KAAkB,IAARR,EAAQf,EAARe,KACpBQ,EAAOO,UAAU,CACff,KAAM,CAAEI,WAAYJ,EAAK+D,SAAShB,6CAI7B,IAAAC,EAAAf,KACP,OACEvC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoD,SAAU1B,EACV2B,YAAa,SAAAlD,GAAQ,IACXmD,EAAUnD,EAAK+D,SAAfZ,MACRtC,aAAauC,QAAQ,aAAcD,GACnCH,EAAK7C,MAAMc,QAAQC,KAAK,MAE1BmC,OAAQ,SAAC7C,EAAQR,GAAT,OAAkBgD,EAAKM,YAAY9C,EAAQR,KAElD,SAAAgE,GAAY,OACXtE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QACE4D,SAAU,SAAA7C,GACRA,EAAEC,iBACFoD,EAAa,CACXP,UAAW,CACTK,KAAMd,EAAKX,MAAMyB,KACjBxB,MAAOU,EAAKX,MAAMC,MAClBC,SAAUS,EAAKX,MAAME,cAK3B7C,EAAAC,EAAAC,cAAA,SACEiD,MAAOG,EAAKX,MAAMyB,KAClBJ,SAAUV,EAAKK,OAAO,QACtBM,YAAY,SAEdjE,EAAAC,EAAAC,cAAA,SACEiD,MAAOG,EAAKX,MAAMC,MAClBoB,SAAUV,EAAKK,OAAO,SACtBM,YAAY,UAEdjE,EAAAC,EAAAC,cAAA,SACEiD,MAAOG,EAAKX,MAAME,SAClBmB,SAAUV,EAAKK,OAAO,YACtBO,KAAK,WACLD,YAAY,aAEdjE,EAAAC,EAAAC,cAAA,UAAQgE,KAAK,UAAb,uBA9DS1E,aCFfT,EAAmBM,EAAnBN,eA0BOwF,EAxBM,WACnB,OACEvE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOrB,GACX,SAAAQ,GAA8B,IAA3BiF,EAA2BjF,EAA3BiF,QAASC,EAAkBlF,EAAlBkF,MAAOnE,EAAWf,EAAXe,KAClB,OAAIkE,EAAgBxE,EAAAC,EAAAC,cAAA,uBAChBuE,EAAczE,EAAAC,EAAAC,cAAA,kBACXI,EAAKoE,SAASC,IAAI,SAAAtE,GAAA,IAAGuE,EAAHvE,EAAGuE,IAAKR,EAAR/D,EAAQ+D,KAAMS,EAAdxE,EAAcwE,KAAMC,EAApBzE,EAAoByE,YAApB,OACvB9E,EAAAC,EAAAC,cAAA,MAAI6E,IAAKH,GACP5E,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMd,GAAE,aAAAqE,OAAeJ,IACrB5E,EAAAC,EAAAC,cAAA,UAAKkE,IAEPpE,EAAAC,EAAAC,cAAA,KAAGa,UAAU,QAAb,SAA2B8D,GAC3B7E,EAAAC,EAAAC,cAAA,KAAGa,UAAU,QAAb,gBAAkC+D,mBChB1C3F,EAAqBE,EAArBF,iBA8DO8F,EA5DG,SAAAxE,GAChB,OACET,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACG,SAAA+E,GAAK,OACJlF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOjB,EAAkB4E,UAAW,CAAEoB,UAAW1E,EAAM2E,KAC3D,SAAA7F,GAA8B,IAA3BiF,EAA2BjF,EAA3BiF,QAASC,EAAkBlF,EAAlBkF,MAAOnE,EAAWf,EAAXe,KAClB,OAAIkE,EAAgBxE,EAAAC,EAAAC,cAAA,uBAChBuE,EAAczE,EAAAC,EAAAC,cAAA,kBAEdI,EAAKgB,KAAK+D,KAAK,SAAAC,GAAI,OAAIA,EAAKF,KAAO3E,EAAM2E,KAEzCpF,EAAAC,EAAAC,cAAA,UACEc,QAAS,SAAAC,GACPA,EAAEC,iBADU,IAONZ,EAAO,CACXgB,KALe4D,EAAMK,UAAU,CAC/BnF,MAAOjB,IADDmC,KAKKkE,OAAO,SAAAF,GAChB,OAAOA,EAAKF,KAAO3E,EAAM2E,MAI7BF,EAAMO,WAAW,CAAErF,MAAOjB,EAAkBmB,WAdhD,oBAsBAN,EAAAC,EAAAC,cAAA,UACEc,QAAS,SAAAC,GACPA,EAAEC,iBADU,IAGJI,EAAS4D,EAAMK,UAAU,CAC/BnF,MAAOjB,IADDmC,KAKFhB,EAAO,CACXgB,KAAI,GAAA0D,OAAAlF,OAAA4F,EAAA,EAAA5F,CAAMwB,GAAN,CAAY,CAAE8D,GAAI3E,EAAM2E,GAAIP,KAAMpE,EAAMoE,SAG9CK,EAAMO,WAAW,CAAErF,MAAOjB,EAAkBmB,WAbhD,oBClCRrB,EAAkBI,EAAlBJ,cAiCO0G,EA/BO,SAAAlF,GACpB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAOnB,EACP8E,UAAW,CAAEoB,UAAW1E,EAAMmF,MAAMC,OAAOV,YAE1C,SAAA5F,GAA8B,IAA3BiF,EAA2BjF,EAA3BiF,QAASC,EAAkBlF,EAAlBkF,MAAOnE,EAAWf,EAAXe,KAClB,GAAIkE,EAAS,OAAOxE,EAAAC,EAAAC,cAAA,uBACpB,GAAIuE,EAAO,OAAOzE,EAAAC,EAAAC,cAAA,kBAElB,IAAI4F,EAAW,OAIf,OAHIxF,EAAKyF,QAAQD,WACfA,EAAWxF,EAAKyF,QAAQD,SAAS1B,MAGjCpE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBAAUI,EAAKyF,QAAQ3B,MACvBpE,EAAAC,EAAAC,cAAA,oBAAYI,EAAKyF,QAAQC,OAAzB,SACAhG,EAAAC,EAAAC,cAAA,yBAAiBI,EAAKyF,QAAQjB,aAC9B9E,EAAAC,EAAAC,cAAA,oBAAYI,EAAKyF,QAAQlB,MACzB7E,EAAAC,EAAAC,cAAA,sBAAc4F,GACd9F,EAAAC,EAAAC,cAAC+F,EAAD,CAAWb,GAAI9E,EAAKyF,QAAQnB,IAAKC,KAAMvE,EAAKyF,QAAQlB,YCxB1D9C,EAAmBI,EAAnBJ,eACAhD,EAAmBM,EAAnBN,eAgGOmH,cA7Fb,SAAAA,EAAYzF,GAAO,IAAA4B,EAAA,OAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,KAAA2D,IACjB7D,EAAAvC,OAAA0C,EAAA,EAAA1C,CAAAyC,KAAAzC,OAAA2C,EAAA,EAAA3C,CAAAoG,GAAAxD,KAAAH,KAAM9B,KAEDkC,MAAQ,CACXwD,QAAS,GACT/B,KAAM,GACN4B,OAAQ,GACRlB,YAAa,IAPEzC,4EAWNpB,GACXA,EAAEC,iBACFqB,KAAKS,SAALlD,OAAAmD,EAAA,EAAAnD,CAAA,GAAiBmB,EAAEiC,OAAOkB,KAAOnD,EAAEiC,OAAOC,uCAGrCL,GAAO,IAAAC,EAAAR,KACZ,OAAO,SAAAtB,GAAC,OAAI8B,EAAKC,SAALlD,OAAAmD,EAAA,EAAAnD,CAAA,GAAiBgD,EAAQ7B,EAAEiC,OAAOC,6CAGpC+B,KAAiB,IAEvBR,EAFepE,EAAQf,EAARe,KACnB8F,QAAQC,IAAI,QAEZ,IACE3B,EAAWQ,EAAMK,UAAU,CAAEnF,MAAOrB,IACpC,MAAOuH,GACP,OAGF,GAAI5B,EAAU,CACZ,IAAI6B,EAAe7B,EAASA,SACxB8B,EAAalG,EAAKkG,WACtBtB,EAAMO,WAAW,CACfrF,MAAOrB,EACPuB,KAAM,CAAEoE,SAAU6B,EAAavB,OAAOwB,4CAK/BvF,EAAGuF,GACdvF,EAAEC,iBAEFsF,EAAW,CACTzC,UAAW,CACTK,KAHO7B,KAAKI,MAAMyB,KAIlBU,YAAavC,KAAKI,MAAMmC,YACxBkB,OAAQS,SAASlE,KAAKI,MAAMqD,4CAKzB,IAAA1C,EAAAf,KACP,OACEvC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEoD,SAAUxB,EACV2E,QAAS,SAAAJ,GAAG,OAAIhD,EAAKN,SAAS,CAAEmD,QAASG,EAAIH,WAC7CxC,OAAQ,SAACuB,EAAO5E,GAAR,OAAiBgD,EAAKM,YAAYsB,EAAO5E,IACjDkD,YAAa,SAAAlD,GAAQ,IACX8D,EAAS9D,EAAKkG,WAAdpC,KACRd,EAAKN,SAAS,CACZmD,QAAO,eAAAnB,OAAiBZ,EAAjB,6BAIV,SAACoC,EAADnG,KAAeC,KAAf,OACCN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM4D,SAAU,SAAA7C,GAAC,OAAIqC,EAAKqD,aAAa1F,EAAGuF,KACxCxG,EAAAC,EAAAC,cAAA,SACE8D,SAAUV,EAAKK,OAAO,QACtBR,MAAOG,EAAKX,MAAMyB,KAClBH,YAAY,SAEdjE,EAAAC,EAAAC,cAAA,YACE8D,SAAUV,EAAKK,OAAO,eACtBR,MAAOG,EAAKX,MAAMmC,YAClBb,YAAY,gBAEdjE,EAAAC,EAAAC,cAAA,SACE8D,SAAUV,EAAKK,OAAO,UACtBR,MAAOG,EAAKX,MAAMqD,OAClB/B,YAAY,SACZC,KAAK,WAEPlE,EAAAC,EAAAC,cAAA,UAAQgE,KAAK,UAAb,mBAEFlE,EAAAC,EAAAC,cAAA,SAAIoD,EAAKX,MAAMwD,mBAtFC3G,aCJpBP,EAAkBI,EAAlBJ,cAsBO2H,EApBE,SAAAnG,GACf,OACET,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOnB,EAAe8E,UAAW,CAAEoB,UAAW1E,EAAM2E,KACxD,SAAA7F,GAA8B,IAA3BiF,EAA2BjF,EAA3BiF,QAASC,EAAkBlF,EAAlBkF,MAAOnE,EAAWf,EAAXe,KAClB,OAAIkE,EAAgBxE,EAAAC,EAAAC,cAAA,uBAChBuE,EAAczE,EAAAC,EAAAC,cAAA,kBAEhBF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBAAUI,EAAKyF,QAAQ3B,MACvBpE,EAAAC,EAAAC,cAAA,oBAAYI,EAAKyF,QAAQC,OAAzB,SACAhG,EAAAC,EAAAC,cAAA,yBAAiBI,EAAKyF,QAAQjB,aAC9B9E,EAAAC,EAAAC,cAAA,oBAAYI,EAAKyF,QAAQlB,MACzB7E,EAAAC,EAAAC,cAAA,eCbJf,EAAqBE,EAArBF,iBAEO,SAAS0H,IACtB,OACE7G,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,MAAOjB,GACX,SAAAI,GAA8B,IAA3Be,EAA2Bf,EAA3Be,KAAMkE,EAAqBjF,EAArBiF,QAASC,EAAYlF,EAAZkF,MACjB,GAAID,EAAS,OAAOxE,EAAAC,EAAAC,cAAA,uBACpB,GAAIuE,EAAO,OAAOzE,EAAAC,EAAAC,cAAA,mBAAWuE,EAAM0B,SAEnC,IAAItB,EAAO,EAEX,OACE7E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACEI,EAAKgB,MAAShB,EAAKgB,KAAKwF,OAGxB9G,EAAAC,EAAAC,cAAA,WACGI,EAAKgB,KAAKqD,IAAI,SAAAoB,GAEb,OADAlB,GAAQkB,EAAQlB,KACT7E,EAAAC,EAAAC,cAAC6G,EAAD,CAAUhC,IAAKgB,EAAQX,GAAIA,GAAIW,EAAQX,OAEhDpF,EAAAC,EAAAC,cAAA,oBAAY2E,IAPd7E,EAAAC,EAAAC,cAAA,iCCRd,ICYI8G,EDsBWC,EAlCH,WACV,OACEjH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMd,GAAG,KAAT,iBAEFX,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOb,KAAK,IAAID,UAAWoB,IAC3Bb,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOZ,OAAK,EAACD,KAAK,IAAID,UAAW8E,IACjCvE,EAAAC,EAAAC,cAACgH,EAAD,CACEvH,OAAK,EACLD,KAAK,uBACLD,UAAWkG,EACX/F,UAAU,cAEZI,EAAAC,EAAAC,cAACgH,EAAD,CACEvH,OAAK,EACLD,KAAK,UACLD,UAAWyG,EACXtG,UAAU,cAEZI,EAAAC,EAAAC,cAACgH,EAAD,CAAWvH,OAAK,EAACD,KAAK,QAAQD,UAAWoH,EAAMjH,UAAU,cACzDI,EAAAC,EAAAC,cAACgH,EAAD,CAAWvH,OAAK,EAACD,KAAK,SAASD,UAAW2C,EAAOxC,UAAU,SAC3DI,EAAAC,EAAAC,cAACgH,EAAD,CACEvH,OAAK,EACLD,KAAK,YACLD,UAAW0E,EACXvE,UAAU,wDCzBZqC,GAAgBE,EAAhBF,YAEFiD,GAAQ,IAAIiC,KAAc,CAC9BC,iBAAkB,SAAAC,GAAM,OAAIA,EAAOzC,KAAO,QAGtC0C,GAAYZ,aAAQ,SAAAnH,GAAuB,IAApBgI,EAAoBhI,EAApBgI,cACvBA,GAAeA,EAAc5C,IAAI,SAAAtE,GAAA,IAAG8F,EAAH9F,EAAG8F,QAAH,OAAiBC,QAAQC,IAAIF,OAMlEa,EAAG,WAKL,IAAMQ,GAAWC,aAAe,CAC9BT,MACAU,QAAS,CACPC,cAAexG,aAAayG,QAAQ,iBAIlC9G,GAAS,IAAI+G,KAAa,CAC9BC,KAAMC,KAAWC,KAAK,CAACV,GAAWE,KAClCtC,SACAwB,QAAS,SAAAuB,GAAqC,IAAlCC,EAAkCD,EAAlCC,aAAcX,EAAoBU,EAApBV,cACxBnB,QAAQC,IAAI,gBAAiBkB,GAC7BnB,QAAQC,IAAI,eAAgB6B,MAIhChD,GAAM7D,UAAU,CACdf,KAAM,CACJI,YAAY,EACZY,KAAM,MAIV,IAAMmC,GAAQtC,aAAayG,QAAQ,cAC/BnE,IACF3C,GACGqH,OAAO,CAAE5E,SAAUtB,GAAa8B,UAAW,CAAEN,YAC7C2E,KAAK,SAAAC,GAAc,IAAX/H,EAAW+H,EAAX/H,KACP4E,GAAM7D,UAAU,CACdf,KAAM,CACJI,WAAYJ,EAAKgI,WAAWjF,SAC5B/B,KAAM,QAgBhBiH,IAAS/H,OAAOR,EAAAC,EAAAC,cAVH,WACX,OACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBW,OAAQA,IACtBd,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACsI,EAAD,SAMQ,MAAUC,SAASC,eAAe","file":"static/js/main.c59a3764.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport default {\n  IS_LOGGED_IN: gql`\n    query IsUserLoggedIn {\n      isLoggedIn @client\n    }\n  `,\n  FETCH_PRODUCTS: gql`\n    query fetchProducts {\n      products {\n        _id\n        name\n        description\n        cost\n      }\n    }\n  `,\n  FETCH_PRODUCT: gql`\n    query fetchProduct($productId: ID!) {\n      product(_id: $productId) {\n        _id\n        name\n        cost\n        description\n        weight\n        category {\n          name\n        }\n      }\n    }\n  `,\n  FETCH_CART_ITEMS: gql`\n    query FetchCartItems {\n      cart @client\n    }\n  `\n};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Query } from 'react-apollo';\nimport Queries from '../graphql/queries';\nconst { IS_LOGGED_IN } = Queries;\n\nconst AuthRoute = ({ component: Component, path, exact, routeType, ...rest }) => (\n    <Query query={IS_LOGGED_IN}>\n        {({ data }) => {\n            if (routeType === 'auth') {\n                return <Route path={path} exact={exact} render={(props) => (\n                    !data.isLoggedIn ? (\n                        <Component {...props} />\n                    ) : (\n                        <Redirect to=\"/\" />\n                        )\n                )} />;\n            } else {\n                return <Route\n                    {...rest}\n                    render={props =>\n                        data.isLoggedIn ? (\n                            <Component {...props} />\n                        ) : (\n                                <Redirect to=\"/login\" />\n                            )\n                    }\n                />\n            }\n        }}\n    </Query>\n)\n\nexport default AuthRoute;","import React from \"react\";\nimport { ApolloConsumer, Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\n\nimport Queries from \"../graphql/queries\";\nconst { IS_LOGGED_IN } = Queries;\n\nconst Nav = props => {\n  return (\n    <ApolloConsumer>\n      {client => (\n        <Query query={IS_LOGGED_IN}>\n          {({ data }) => {\n            if (data.isLoggedIn) {\n              return (\n                <div className=\"nav\">\n                  <button\n                    onClick={e => {\n                      e.preventDefault();\n                      localStorage.removeItem(\"auth-token\");\n                      client.writeData({\n                        data: {\n                          isLoggedIn: false,\n                          cart: []\n                        }\n                      });\n                      props.history.push(\"/\");\n                    }}\n                  >\n                    Logout\n                  </button>\n                  <Link to=\"/cart\">Cart</Link>\n                  <Link to=\"/create\">Create A New Product</Link>\n                </div>\n              );\n            } else {\n              return (\n                <div className=\"nav\">\n                  <Link to=\"/login\">Login</Link>\n                  <Link to=\"/register\">Register</Link>\n                </div>\n              );\n            }\n          }}\n        </Query>\n      )}\n    </ApolloConsumer>\n  );\n};\n\nexport default Nav;\n","import gql from \"graphql-tag\";\n\nexport default {\n  LOGIN_USER: gql`\n    mutation LoginUser($email: String!, $password: String!) {\n      login(email: $email, password: $password) {\n        token\n        loggedIn\n      }\n    }\n  `,\n  REGISTER_USER: gql`\n    mutation RegisterUser($email: String!, $name: String!, $password: String!) {\n      register(email: $email, name: $name, password: $password) {\n        token\n        loggedIn\n      }\n    }\n  `,\n  CREATE_PRODUCT: gql`\n    mutation CreateProduct(\n      $name: String!\n      $description: String!\n      $weight: Int!\n    ) {\n      newProduct(name: $name, description: $description, weight: $weight) {\n        _id\n        name\n        description\n        weight\n      }\n    }\n  `,\n  VERIFY_USER: gql`\n    mutation VerifyUser($token: String!) {\n      verifyUser(token: $token) {\n        loggedIn\n      }\n    }\n  `\n};\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../graphql/mutations\";\n\nconst { LOGIN_USER } = Mutations;\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(client, { data }) {\n    client.writeData({\n      data: { isLoggedIn: data.login.loggedIn }\n    });\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={LOGIN_USER}\n        onCompleted={data => {\n          const { token } = data.login;\n          localStorage.setItem(\"auth-token\", token);\n          this.props.history.push(\"/\");\n        }}\n        update={(client, data) => this.updateCache(client, data)}\n      >\n        {loginUser => (\n          <div>\n            <form\n              onSubmit={e => {\n                e.preventDefault();\n                loginUser({\n                  variables: {\n                    email: this.state.email,\n                    password: this.state.password\n                  }\n                });\n              }}\n            >\n              <input\n                value={this.state.email}\n                onChange={this.update(\"email\")}\n                placeholder=\"Email\"\n              />\n              <input\n                value={this.state.password}\n                onChange={this.update(\"password\")}\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n              <button type=\"submit\">Log In</button>\n            </form>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../graphql/mutations\";\n\nconst { REGISTER_USER } = Mutations;\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(client, { data }) {\n    client.writeData({\n      data: { isLoggedIn: data.register.loggedIn }\n    });\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={REGISTER_USER}\n        onCompleted={data => {\n          const { token } = data.register;\n          localStorage.setItem(\"auth-token\", token);\n          this.props.history.push(\"/\");\n        }}\n        update={(client, data) => this.updateCache(client, data)}\n      >\n        {registerUser => (\n          <div>\n            <form\n              onSubmit={e => {\n                e.preventDefault();\n                registerUser({\n                  variables: {\n                    name: this.state.name,\n                    email: this.state.email,\n                    password: this.state.password\n                  }\n                });\n              }}\n            >\n              <input\n                value={this.state.name}\n                onChange={this.update(\"name\")}\n                placeholder=\"Name\"\n              />\n              <input\n                value={this.state.email}\n                onChange={this.update(\"email\")}\n                placeholder=\"Email\"\n              />\n              <input\n                value={this.state.password}\n                onChange={this.update(\"password\")}\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n              <button type=\"submit\">Register</button>\n            </form>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default Register;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_PRODUCTS } = Queries;\n\nconst ProductIndex = () => {\n  return (\n    <div>\n      <ul>\n        <Query query={FETCH_PRODUCTS}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error</p>;\n            return data.products.map(({ _id, name, cost, description }) => (\n              <li key={_id}>\n                <Link to={`/products/${_id}`}>\n                  <h4>{name}</h4>\n                </Link>\n                <p className=\"cost\">Cost: {cost}</p>\n                <p className=\"cost\">Description: {description}</p>\n              </li>\n            ));\n          }}\n        </Query>\n      </ul>\n    </div>\n  );\n};\n\nexport default ProductIndex;\n","import React from \"react\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_CART_ITEMS } = Queries;\n\nconst AddToCart = props => {\n  return (\n    <ApolloConsumer>\n      {cache => (\n        <Query query={FETCH_CART_ITEMS} variables={{ productId: props.id }}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error</p>;\n\n            if (data.cart.some(item => item.id === props.id)) {\n              return (\n                <button\n                  onClick={e => {\n                    e.preventDefault();\n                    // first we read the query from the cache\n                    const { cart } = cache.readQuery({\n                      query: FETCH_CART_ITEMS\n                    });\n                    // filter out the item we want to remove\n                    const data = {\n                      cart: cart.filter(item => {\n                        return item.id !== props.id;\n                      })\n                    };\n                    // re-add to our cache with that removed item\n                    cache.writeQuery({ query: FETCH_CART_ITEMS, data });\n                  }}\n                >\n                  Remove from cart\n                </button>\n              );\n            } else {\n              return (\n                <button\n                  onClick={e => {\n                    e.preventDefault();\n                    // read from the cache\n                    const { cart } = cache.readQuery({\n                      query: FETCH_CART_ITEMS\n                    });\n                    // create our object with the id and cost from our props and add it to\n                    // the array of cart items\n                    const data = {\n                      cart: [...cart, { id: props.id, cost: props.cost }]\n                    };\n                    // write to our cache with our new array of cart items!\n                    cache.writeQuery({ query: FETCH_CART_ITEMS, data });\n                  }}\n                >\n                  Add to cart\n                </button>\n              );\n            }\n          }}\n        </Query>\n      )}\n    </ApolloConsumer>\n  );\n};\n\nexport default AddToCart;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport AddToCart from \"../cart/AddToCart\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_PRODUCT } = Queries;\n\nconst ProductDetail = props => {\n  return (\n    <div>\n      <Query\n        query={FETCH_PRODUCT}\n        variables={{ productId: props.match.params.productId }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return <p>Loading...</p>;\n          if (error) return <p>Error</p>;\n          // set up our category in case we don't have one\n          let category = \"None\";\n          if (data.product.category) {\n            category = data.product.category.name;\n          }\n          return (\n            <div>\n              <p>Name: {data.product.name}</p>\n              <p>Weight: {data.product.weight} lbs.</p>\n              <p>Description: {data.product.description}</p>\n              <p>Price: ${data.product.cost}</p>\n              <p>Category: {category}</p>\n              <AddToCart id={data.product._id} cost={data.product.cost} />\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default ProductDetail;\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\n\nimport Mutations from \"../../graphql/mutations\";\nimport Queries from \"../../graphql/queries\";\nconst { CREATE_PRODUCT } = Mutations;\nconst { FETCH_PRODUCTS } = Queries;\n\nclass CreateProduct extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\",\n      name: \"\",\n      weight: \"\",\n      description: \"\"\n    };\n  }\n\n  handleUpdate(e) {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(cache, { data }) {\n    console.log(\"here\");\n    let products;\n    try {\n      products = cache.readQuery({ query: FETCH_PRODUCTS });\n    } catch (err) {\n      return;\n    }\n\n    if (products) {\n      let productArray = products.products;\n      let newProduct = data.newProduct;\n      cache.writeQuery({\n        query: FETCH_PRODUCTS,\n        data: { products: productArray.concat(newProduct) }\n      });\n    }\n  }\n\n  handleSubmit(e, newProduct) {\n    e.preventDefault();\n    let name = this.state.name;\n    newProduct({\n      variables: {\n        name: name,\n        description: this.state.description,\n        weight: parseInt(this.state.weight)\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={CREATE_PRODUCT}\n        onError={err => this.setState({ message: err.message })}\n        update={(cache, data) => this.updateCache(cache, data)}\n        onCompleted={data => {\n          const { name } = data.newProduct;\n          this.setState({\n            message: `New product ${name} created successfully`\n          });\n        }}\n      >\n        {(newProduct, { data }) => (\n          <div>\n            <form onSubmit={e => this.handleSubmit(e, newProduct)}>\n              <input\n                onChange={this.update(\"name\")}\n                value={this.state.name}\n                placeholder=\"Name\"\n              />\n              <textarea\n                onChange={this.update(\"description\")}\n                value={this.state.description}\n                placeholder=\"description\"\n              />\n              <input\n                onChange={this.update(\"weight\")}\n                value={this.state.weight}\n                placeholder=\"Weight\"\n                type=\"number\"\n              />\n              <button type=\"submit\">Create Product</button>\n            </form>\n            <p>{this.state.message}</p>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default CreateProduct;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_PRODUCT } = Queries;\n\nconst CartItem = props => {\n  return (\n    <Query query={FETCH_PRODUCT} variables={{ productId: props.id }}>\n      {({ loading, error, data }) => {\n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error</p>;\n        return (\n          <div>\n            <p>Name: {data.product.name}</p>\n            <p>Weight: {data.product.weight} lbs.</p>\n            <p>Description: {data.product.description}</p>\n            <p>Price: ${data.product.cost}</p>\n            <hr />\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default CartItem;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport CartItem from \"./CartItem\";\n\nimport Queries from \"../../graphql/queries\";\nconst { FETCH_CART_ITEMS } = Queries;\n\nexport default function Cart() {\n  return (\n    <Query query={FETCH_CART_ITEMS}>\n      {({ data, loading, error }) => {\n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error: {error.message}</p>;\n\n        let cost = 0;\n\n        return (\n          <div>\n            <h3>Shopping Cart</h3>\n            {!data.cart || !data.cart.length ? (\n              <p>The cart is empty</p>\n            ) : (\n              <div>\n                {data.cart.map(product => {\n                  cost += product.cost;\n                  return <CartItem key={product.id} id={product.id} />;\n                })}\n                <b>Total: ${cost}</b>\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </Query>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport AuthRoute from \"../util/route_util\";\n\nimport Nav from \"./Nav\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport ProductIndex from \"./products/ProductIndex\";\nimport ProductDetail from \"./products/ProductDetail\";\nimport CreateProduct from \"./products/CreateProduct\";\nimport Cart from \"./cart/Cart\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>\n        <Link to=\"/\">Online Store</Link>\n      </h1>\n      <Route path=\"/\" component={Nav} />\n      <Switch>\n        <Route exact path=\"/\" component={ProductIndex} />\n        <AuthRoute\n          exact\n          path=\"/products/:productId\"\n          component={ProductDetail}\n          routeType=\"protected\"\n        />\n        <AuthRoute\n          exact\n          path=\"/create\"\n          component={CreateProduct}\n          routeType=\"protected\"\n        />\n        <AuthRoute exact path=\"/cart\" component={Cart} routeType=\"protected\" />\n        <AuthRoute exact path=\"/login\" component={Login} routeType=\"auth\" />\n        <AuthRoute\n          exact\n          path=\"/register\"\n          component={Register}\n          routeType=\"auth\"\n        />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./public/index.css\";\nimport App from \"./components/App\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloLink } from \"apollo-link\";\nimport { onError } from \"apollo-link-error\";\n\nimport Mutations from \"./graphql/mutations\";\nconst { VERIFY_USER } = Mutations;\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n});\n\nlet uri;\n\nif (process.env.NODE_ENV === \"production\") {\n  uri = `/graphql`;\n} else {\n  uri = \"http://localhost:5000/graphql\";\n}\n\nconst httpLink = createHttpLink({\n  uri,\n  headers: {\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n});\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([errorLink, httpLink]),\n  cache,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\ncache.writeData({\n  data: {\n    isLoggedIn: false,\n    cart: []\n  }\n});\n\nconst token = localStorage.getItem(\"auth-token\");\nif (token) {\n  client\n    .mutate({ mutation: VERIFY_USER, variables: { token } })\n    .then(({ data }) => {\n      cache.writeData({\n        data: {\n          isLoggedIn: data.verifyUser.loggedIn,\n          cart: []\n        }\n      });\n    });\n}\n\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}